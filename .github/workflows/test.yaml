name: Test Requested
run-name: Test fake_cpp_project
on:
  workflow_call:
    inputs:
      gitBranch:
        description: 'The git branch to test (passed to FetchContent GIT_TAG)'
        required: true
        default: 'main'
        type: string
      container_id:
        description: "The github run ID from main-build.yaml (used for containers management)"
        required: true
        type: string
    outputs:
      test_result:
        description: "Returns if the Tests succeeded."
        value: ${{ jobs.tests.outputs.test_result }}

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GENERATOR: Ninja

jobs:
  tests:
    name: Run Project Tests
    runs-on: [self-hosted, MacOS, ARM64]

    outputs:
      test_result: ${{ steps.test.outputs.test_result }}

    steps:
    - uses: actions/checkout@v4

    - id: check-system-requirements
      name: Check System Requirements
      run: |
        echo "gitBranch: ${{ inputs.gitBranch }}"

    - id: setup
      name: Setup
      run: |
        docker run --name test_fake_cpp_project-container-${{ github.run_id }} --detach -i -t -v .:/project-tests alpine /bin/sh

    - id: configure
      name: Configure
      run: |
        docker exec -w /project-tests test_fake_cpp_project-container-${{ github.run_id }} sh -c "apk update && apk add \
          clang \
          lld \
          ninja \
          ccache \
          cmake \
          build-base \
          python3 \
          git \
          zlib-dev"

    - id: generate
      name: Generate
      run: |
        docker exec -w /project-tests test_fake_cpp_project-container-${{ github.run_id }} sh -c "cmake -S . -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G ${{ env.GENERATOR }} -DFAKE_CPP_PROJECT_BRANCH=${{ inputs.gitBranch }}"

    - id: build
      name: Build
      run: |
        docker exec -w /project-tests test_fake_cpp_project-container-${{ github.run_id }} sh -c "cmake --build build --config ${{env.BUILD_TYPE}}"
    
    - id: test
      name: Test
      run: |
        set -e
        docker exec -w /project-tests test_fake_cpp_project-container-${{ github.run_id }} sh -c "ctest --test-dir build --output-on-failure"
        if [ $? -eq 0 ]; then
          echo "Tests succeeded."
          echo "test_result=true" >> $GITHUB_OUTPUT
        else
          echo "Tests Failed."
          echo "test_result=false" >> $GITHUB_OUTPUT
        fi

    - id: teardown
      name: Teardown
      if: always()
      run: |
        echo "Cleaning up container ..."
        docker container stop test_fake_cpp_project-container-${{ github.run_id }} || echo "Container already stopped"
        docker container rm test_fake_cpp_project-container-${{ github.run_id }} || echo "Container already removed"
