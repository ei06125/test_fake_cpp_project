# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Test fake_cpp_project

on:
  workflow_dispatch:
    inputs:
      gitBranch:
        description: 'The git branch to test'
        required: false
        default: 'main'
        type: string
      container_id:
        description: "The github run ID from build.yaml"
        required: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GENERATOR: Ninja

jobs:
  test:
    runs-on: [self-hosted, MacOS, ARM64]

    steps:
    - uses: actions/checkout@v4

    - name: Check System Requirements
      run: |
        echo "gitBranch: ${{ inputs.gitBranch }}"

    - name: Setup
      run: |
        docker run --name test_fake_cpp_project-container-${{ github.run_id }} --detach -i -t -v .:/project-tests alpine /bin/sh

    - name: Configure
      run: |
        docker exec -w /project-tests test_fake_cpp_project-container-${{ github.run_id }} sh -c "apk update && apk add \
          clang \
          lld \
          ninja \
          ccache \
          cmake \
          build-base \
          python3 \
          git \
          zlib-dev"

    - name: Generate
      run: |
        docker exec -w /project-tests test_fake_cpp_project-container-${{ github.run_id }} sh -c "cmake -S . -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G ${{ env.GENERATOR }}"

    - name: Build
      run: |
        docker exec -w /project-tests test_fake_cpp_project-container-${{ github.run_id }} sh -c "cmake --build build --config ${{env.BUILD_TYPE}}"
    
    - name: Test
      run: |
        set -e
        docker exec -w /project-tests test_fake_cpp_project-container-${{ github.run_id }} sh -c "ctest --test-dir build --output-on-failure"

    - name: Teardown
      run: |
        docker container stop test_fake_cpp_project-container-${{ github.run_id }}
        docker container rm test_fake_cpp_project-container-${{ github.run_id }}
